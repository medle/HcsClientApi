
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

using Newtonsoft.Json;

namespace Hcs.ClientApi.DataTypes
{
    /// <summary>
    /// Прибор учета из ГИС ЖКХ может быть привязан к списку зданий (ОДПУ) 
    /// или к списку Лицевых счетов (все виды кроме ОДПУ).
    /// </summary>
    public class ГисПриборУчета
    {
        public Guid ГуидПрибораУчета;
        public Guid ГуидВерсииПрибора;
        public string НомерПрибораУчетаГис;

        public DateTime? ДатаРазмещенияВерсии;
        public Guid ГуидВладельцаПрибора;

        public ГисСтатусПрибораУчета СтатусПрибораУчета;
        public ГисВидПрибораУчета ВидПрибораУчета;

        public string ЗаводскойНомер;
        public string МодельПрибораУчета;

        [JsonIgnore]
        public bool КоэффициентТрансформацииУказан => (КоэффициентТрансформации > 0);
        public decimal КоэффициентТрансформации;

        public string ПоказаниеТ1;
        public string ПоказаниеТ2;
        public string ПоказаниеТ3;

        public DateTime? ДатаИзготовления; // обязательно при импорте
        public DateTime? ДатаУстановки;
        public DateTime? ДатаВводаВЭксплуатацию; // обязательно кроме ОДПУ
        public DateTime? ДатаПоследнейПоверки;   // обязательно для ОДПУ

        public bool РежимДистанционногоОпроса;       // признак наличия ИСУ
        public string ОписаниеДистанционногоОпроса;  // наименование ИСУ

        public Guid[] ГуидыЗданийФиас; 
        public Guid[] ГуидыЛицевыхСчетов;
        public Guid[] ГуидыПомещений;
        public Guid[] ГуидыЖилыхКомнат;

        [JsonIgnore]
        public bool ЭтоАктивный => (СтатусПрибораУчета == ГисСтатусПрибораУчета.Активный);

        [JsonIgnore]
        public bool ЭтоАрхивный => (СтатусПрибораУчета == ГисСтатусПрибораУчета.Архивный);

        [JsonIgnore]
        public bool ЭтоОДПУ => (ВидПрибораУчета == ГисВидПрибораУчета.ОДПУ);

        [JsonIgnore]
        public bool ЭтоНежилоеПомещение => (ВидПрибораУчета == ГисВидПрибораУчета.НежилоеПомещение);

        [JsonIgnore]
        public bool ЭтоПриборЮЛ => ЭтоОДПУ || ЭтоНежилоеПомещение;

        public bool СвязанСЛицевымСчетом(ГисЛицевойСчет лс)
        {
            if (лс == null || ГуидыЛицевыхСчетов == null || ГуидыЛицевыхСчетов.Length == 0) return false;
            if (ГуидыЛицевыхСчетов.Length == 1) return (ГуидыЛицевыхСчетов[0] == лс.ГуидЛицевогоСчета);
            return ГуидыЛицевыхСчетов.Contains(лс.ГуидЛицевогоСчета);
        }

        public bool СвязанСАдреснымОбъектом(ГисАдресныйОбъект адрес)
        {
            // TODO: для лицевых счетов здесь надо тестировать ГУИД помещения
            if (адрес == null || ГуидыЗданийФиас == null || ГуидыЗданийФиас.Length == 0) return false;
            if (ГуидыЗданийФиас.Length == 1) return ГуидыЗданийФиас[0] == адрес.ГуидЗданияФиас;
            return ГуидыЗданийФиас.Contains(адрес.ГуидЗданияФиас);
        }

        public bool ЗаполненГуидЗданияФиас => (ГуидыЗданийФиас != null && ГуидыЗданийФиас.Length > 0);

        public Guid? ОдинГуидЗданияФиас => (ЗаполненГуидЗданияФиас ? ГуидыЗданийФиас[0] : null);

        public override string ToString()
        {
            int числоЛС = ГуидыЛицевыхСчетов != null ? ГуидыЛицевыхСчетов.Length : 0;
            int числоДомов = ГуидыЗданийФиас != null ? ГуидыЗданийФиас.Length : 0;
            return $"{ВидПрибораУчета} {СтатусПрибораУчета} №{ЗаводскойНомер} [{МодельПрибораУчета}]" +
                   $"Гуид={ГуидПрибораУчета} ЧислоЛС={числоЛС} ЧислоДомов={числоДомов}";
        }
    }

    public enum ГисВидПрибораУчета
    {
        ЖилоеПомещение,
        НежилоеПомещение,
        ОДПУ,
        ЖилойДом,
        ЖилаяКомната,
        КоммунальнаяКвартира
    }

    public enum ГисСтатусПрибораУчета { Активный, Архивный }
}
